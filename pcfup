#!/bin/bash

export PCFUP_VERSION=0.0.4

getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "[ERR] Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

OPTIONS=vd:t:u:k
LONGOPTIONS=verbose,download-folder:,om-username:,om-password:,skip-ssl-validation,iaas:,offline,prepare-offline

PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"

export DOWNLOAD_PATH_OM="https://github.com/pivotal-cf/om/releases/download/0.29.0/om-linux"
export DOWNLOAD_PATH_PIVNET="https://github.com/pivotal-cf/pivnet-cli/releases/download/v0.0.49/pivnet-linux-amd64-0.0.49"
export DOWNLOAD_PATH_JQ="https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64"

export DOWNLOADS_FOLDER="downloads"

OM_ARGS=
export ENABLE_VERBOSE=0

while true; do
  case "$1" in
    -v|--verbose)
      ENABLE_VERBOSE=1
      shift
      ;;
    -d|--download-folder)
      DOWNLOADS_FOLDER="$2"
      shift 2
      ;;
    -t|--om-target)
      OM_TARGET="$2"
      shift 2
      ;;
    -u|--om-username)
      OM_USERNAME="$2"
      shift 2
      ;;
    --om-password)
      OM_PASSWORD="$2"
      shift 2
      ;;
    -k|--skip-ssl-validation)
      OM_ARGS="$OM_ARGS -k"
      shift 2
      ;;
    --iaas)
      IAAS="$2"
      shift 2
      ;;
    --offline)
      ;;
    --prepare-offline)
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Programming error"
      exit 3
      ;;
  esac
done


set -eu

###########################################################
# log methods
###########################################################

function logDebug() {
  if [[ $ENABLE_VERBOSE -eq 1 ]]; then
    >&2 echo "[DEBUG] $@"
  fi
}

function logInfo() {
  >&2 echo "[INFO] $@"
}

function logError() {
  >&2 echo "[ERR] $@"
}

###########################################################
# generic methods
###########################################################

NUMBER_OF_ARGUMENTS=$#
function assertNumberOfArguments() {
  if [[ $NUMBER_OF_ARGUMENTS -ne $1 ]]; then
    logError "Usage: $2"
    exit 1
  fi
}

function assertOmAvailable() {
  type om 2>>/dev/null >>/dev/null || (logError "failed to find om, please use 'pcfup download-tools' or install om manually." ; exit 10)

  if [ -z ${OM_TARGET+x} ]; then
    logError "Please set OM_TARGET"
    exit 1
  fi
  if [ -z ${OM_USERNAME+x} ]; then
    logError "Please set OM_USERNAME"
    exit 1
  fi
  if [ -z ${OM_PASSWORD+x} ]; then
    logError "Please set OM_PASSWORD"
    exit 1
  fi
}

function assertOmSignedIn() {
  # TODO: Check if OM config is present and signed in
  logDebug "Verification of om login not available yet"
}

function assertPivnetAvailable() {
  type pivnet 2>>/dev/null >>/dev/null || (logError "failed to find pivnet, please use 'pcfup download-tools' or install pivnet manually." ; exit 10)
}

function assertPivnetSignedIn() {
  # TODO: Check if pivnet config is present and signed in
  logDebug "Verification of pivnet login not available yet"
}

function assertJqAvailable() {
  type jq 2>>/dev/null >>/dev/null || (logError "failed to find jq, please use 'pcfup download-tools' or install jq manually." ; exit 10)
}

function assertIaasAvailable() {
  test -v IAAS 2>>/dev/null >>/dev/null || (logError "failed to detect IaaS, please set environment variable \$IAAS or specify --iaas." ; exit 10)
}

function execPivnet() {
  logDebug "execute pivnet $@"
  pivnet $@
}

function execOM() {
  logDebug "execute om $@"
  om -t $OM_TARGET --username=$OM_USERNAME --password=$OM_PASSWORD --skip-ssl-validation $@
}


###########################################################
# command: help
###########################################################

function commandHelp() {
  echo "pcfup makes it easy to upgrade your PCF installation manually

Usage: pcfup [parameters] <command> [args...]

Parameters:
  -v|--verbose                 bool    Show verbose output during command execution
  -d|--download-folder         string  Download folder for local product and stemcell cache
  -t|--om-target               string  Location of the Operations Manager VM (alternative env OM_TARGET)
  -u|--om-username             string  Admin username for the Operations Manager (alternatively env OM_USERNAME)
  --om-password                string  Admin password for the Operations Manager (alternatively env OM_PASSWORD)
  -k|--skip-ssl-validation     bool    Skip the ssl validation for connections to the Operations Manager
  --iaas                       string  Name of the IaaS you are using, used for matching in stemcell names (e.g. vsphere)
* --offline                    bool    Offline mode which will not try to connect to PivNet
* --prepare-offline            bool    Preparation mode for the offline mode, will download files from pivnet, but do not connect to Operations Manager

Commands:
  pcfup help
    Show this help
  pcfup product <product> <version>
    Download a product from Pivotal Network and install it to the Operations Manager, including the necessary stemcell.
  pcfup stemcell <stemcell>
    Download a stemcell from Pivotal Network and install it to the Operations Manager.
  pcfup download-tools
    Download tools which are necessary to run this application.
  pcfup credentials
    Extract and show useful BOSH and CF credentials.
  pcfup pivnet-login <pivnet-auth-token>
    Login with an authentication token to the Pivotal Network.
  pcfup installed-products
    List all installed products for your Operations Manager installation.
  pcfup available-product-versions
    List available versions of a product inside the Pivotal Network.
  pcfup export-installation <file>
    Export your Operations Manager installation to a local zip-file, necessary for Operations Manager upgrade.
  pcfup import-installation <file>
    Import your Operations Manager installation to an new Operations Manager.
  pcfup wait-for-installation
    Blocks the console until the current running installation is finished. The exit code indicates, whether the installation was successful (=0) or not (!=0).
  pcfup om -- <om-command>
    Execute a 'om' tool command. For using parameters from the om tool, the '--' is necessary to avoid handling by pcfup.
* pcfup outdated
* pcfup cleanup-downloads
* pcfup cleanup-om
  pcfup version
    Shows the current version of pcfup.

* not implemented yet"
}


###########################################################
# command: pivnet-login
###########################################################

function commandPivnetLogin() {
  assertPivnetAvailable
  assertNumberOfArguments 2 "pcfup pivnet-login <pivnet-auth-token>"

  logInfo "login to pivnet"
  execPivnet login --api-token=$2
}


###########################################################
# command: product
###########################################################

function commandProduct() {
  assertPivnetAvailable
  assertOmAvailable
  assertPivnetSignedIn
  assertOmSignedIn
  assertIaasAvailable
  assertNumberOfArguments 3 "pcfup product <product> <version>"

  PRODUCT=$2
  VERSION=$3
  PRODUCT_DOWNLOAD_FOLDER=$DOWNLOADS_FOLDER/$PRODUCT/$VERSION

  mkdir -p $PRODUCT_DOWNLOAD_FOLDER
  if [[ $(ls -1 $PRODUCT_DOWNLOAD_FOLDER/*.pivotal || echo "1") == "1" ]]; then
    logInfo "download $PRODUCT ($VERSION) from pivnet..."
    execPivnet download-product-files -p $PRODUCT -r $VERSION -d $PRODUCT_DOWNLOAD_FOLDER --glob=*.pivotal --accept-eula
  else
    logInfo "use cached version from $PRODUCT_DOWNLOAD_FOLDER"
  fi
 
  PRODUCT_FILE=$(ls -1 $PRODUCT_DOWNLOAD_FOLDER/$PRODUCT*.pivotal 2>> /dev/null | head -1)
  if [[ "$PRODUCT_FILE" == "" ]]; then
    PRODUCT_FILE=$(ls -1 $PRODUCT_DOWNLOAD_FOLDER/*.pivotal | head -1)
  fi
  logDebug "parse $PRODUCT_FILE to determine the necessary stemcell version."
  
  PRODUCT_METADATA=$(mktemp)
  unzip -p $PRODUCT_FILE 'metadata/*' > $PRODUCT_METADATA
  
  logInfo "meta data file is stored at $PRODUCT_METADATA"
  STEMCELL_VERSION=$(ruby -ryaml -e 'puts YAML.load(File.new("'$PRODUCT_METADATA'", "r"))["stemcell_criteria"]["version"]')
  PRODUCT_NAME=$(ruby -ryaml -e 'puts YAML.load(File.new("'$PRODUCT_METADATA'", "r"))["name"]')
  rm $PRODUCT_METADATA
  logInfo "detected $STEMCELL_VERSION in product, ensure that this version is available."

  if [ -n "$STEMCELL_VERSION" ]; then
    ensureStemcellIsAvailable $STEMCELL_VERSION
  fi
  
  logInfo "upload product $PRODUCT to OpsManager."
  execOM upload-product --product $PRODUCT_FILE
  
  logInfo "stage product $PRODUCT."
  execOM stage-product -p $PRODUCT_NAME -v $VERSION
}


###########################################################
# command: stemcell
###########################################################

function commandStemcell() {
  assertPivnetAvailable
  assertOmAvailable
  assertPivnetSignedIn
  assertOmSignedIn
  assertIaasAvailable
  assertNumberOfArguments 2 "pcfup stemcell <version>"

  ensureStemcellIsAvailable $2
}

function ensureStemcellIsAvailable() {
  STEMCELL_VERSION=$1
  diagnostic_report=$(
    execOM curl --silent --path "/api/v0/diagnostic_report"
  )
 
  stemcell=$(
    echo $diagnostic_report |
    jq \
      --arg version "$STEMCELL_VERSION" \
      --arg glob "$IAAS" \
    '.stemcells[] | select(contains($version) and contains($glob))'
  )
 
  if [[ -z "$stemcell" ]]; then
    logDebug "need to install $STEMCELL_VERSION / $IAAS"
    downloadStemcell $STEMCELL_VERSION
    SC_FILE_PATH=$(ls -1 $DOWNLOADS_FOLDER/bosh-stemcell*$STEMCELL_VERSION*$IAAS*.tgz | head -1)
   
    if [ ! -f "$SC_FILE_PATH" ]; then
      logError "stemcell file not found!"
      exit 1
    fi
   
    logInfo "upload $STEMCELL_VERSION to OpsManager"
    execOM upload-stemcell -s $SC_FILE_PATH
  else
    logDebug "$STEMCELL_VERSION already installed"
  fi
}

function downloadStemcell() {
  STEMCELL_VERSION=$1
  logInfo "download stemcell $STEMCELL_VERSION"
  
  product_slug="stemcells"
  SC_FILE_PATH=$(ls -1 $DOWNLOADS_FOLDER/bosh-stemcell*$STEMCELL_VERSION*$IAAS*.tgz | head -1 2>> /dev/null)
  logDebug "path to stemcell: $SC_FILE_PATH--"
  if [[ "$SC_FILE_PATH" == "" ]]; then
    execPivnet download-product-files -p "$product_slug" -r $STEMCELL_VERSION -g "*${IAAS}*" --accept-eula -d $DOWNLOADS_FOLDER/
  fi
}


###########################################################
# command: download-tools
###########################################################

function commandDownloadTools() {
  mkdir -p ~/bin

  set +e
  type om 2>> /dev/null >> /dev/null
  if [[ $? -eq 1 ]]; then
    logInfo "download om tool to ~/bin/om"
    wget -O$HOME/bin/om $DOWNLOAD_PATH_OM
    chmod +x ~/bin/om
  else
    logDebug "do not need to download om, it's already there"
  fi

  type pivnet 2>> /dev/null >> /dev/null
  if [[ $? -eq 1 ]]; then
    logInfo "download pivnet to ~/bin/pivnet"
    wget -O$HOME/bin/pivnet $DOWNLOAD_PATH_PIVNET
    chmod +x ~/bin/pivnet
  else
    logDebug "do not need to download pivnet, it's already there"
  fi

  type jq 2>> /dev/null >> /dev/null
  if [[ $? -eq 1 ]]; then
    logInfo "download jq tool to ~/bin/jq"
    wget -O$HOME/bin/jq $DOWNLOAD_PATH_JQ
    chmod +x ~/bin/jq
  else
    logDebug "do not need to download jq, it's already there"
  fi

  logInfo "all tools are downloaded"
  set -e
}


###########################################################
# command: installed-products
###########################################################

function commandInstalledProducts() {
  assertOmAvailable
  assertOmSignedIn
  assertNumberOfArguments 1 "pcfup installed-products"

  execOM deployed-products
}


###########################################################
# command: available-product-versions
###########################################################

function commandAvailableProductVersions() {
  assertPivnetAvailable
  assertPivnetSignedIn
  assertNumberOfArguments 2 "pcfup available-product-versions <product>"

  PRODUCT=$2
  execPivnet releases -p $PRODUCT | less
}


###########################################################
# command: export-installation
###########################################################

function commandExportInstallation() {
  assertOmAvailable
  assertOmSignedIn
  assertNumberOfArguments 2 "pcfup export-installation <filename>"

  mkdir -p $(dirname $2)
  execOM export-installation -o $2
}


###########################################################
# command: export-installation
###########################################################

function commandImportInstallation() {
  assertOmAvailable
  assertOmSignedIn
  assertNumberOfArguments 2 "pcfup import-installation <filename>"

  echo -n "Decryption passphrase (visible): "
  read DECRYPTION_PASSPHRASE
  execOM import-installation -i $2 -dp $DECRYPTION_PASSPHRASE
}


###########################################################
# command: om
###########################################################

function commandOM() {
  assertOmAvailable
  assertOmSignedIn

  execOM ${@:2}
}


###########################################################
# command: wait-for-installation
###########################################################

function commandWaitForInstallation() {
   assertOmAvailable
   assertOmSignedIn
  assertNumberOfArguments 1 "pcfup wait-for-installation"

   INSTALLATION_ID=$(execOM curl -p /api/v0/installations 2>> /dev/null | jq .installations[0].id)

   logInfo "waiting for status of installation $INSTALLATION_ID"
   
   while true; do
     STATUS=$(execOM curl -p /api/v0/installations/$INSTALLATION_ID 2>> /dev/null |jq .status)

     logDebug "current status of installation is $STATUS"

     if [[ "$STATUS" != '"running"' ]]; then
       logInfo "upgrade is no longer running, exit application."

       if [[ "$STATUS" == '"succeeded"' ]]; then
         exit 0
       else
         exit 100
       fi
     fi

     sleep 1m;
   done
}


###########################################################
# command: credentials
###########################################################

function commandCredentials() {
  assertOmAvailable
  assertOmSignedIn
  assertNumberOfArguments 1 "pcfup credentials"

  logInfo "Getting credentials"

  # BOSH Director credentials
  if [ -z ${PCFUP_DIRECTOR_USER+x} ]; then
    DIRECTOR=$(execOM curl -p "/api/v0/deployed/director/credentials/director_credentials" 2>/dev/null)
    export PCFUP_DIRECTOR_USER=$(echo $DIRECTOR | jq -r ".credential.value.identity")
    export PCFUP_DIRECTOR_PASSWORD=$(echo $DIRECTOR | jq -r ".credential.value.password")
  fi
  logInfo "BOSH Director"
  logInfo "  PCFUP_DIRECTOR_USER: ${PCFUP_DIRECTOR_USER}"
  logInfo "  PCFUP_DIRECTOR_PASSWORD: ${PCFUP_DIRECTOR_PASSWORD}"

  # BOSH DIRECTOR VM
  if [ -z ${PCFUP_BOSH_VM_USER+x} ]; then
    BOSH_VM=$(execOM curl -p "/api/v0/deployed/director/credentials/vm_credentials" 2>/dev/null)
    export PCFUP_BOSH_VM_USER=$(echo ${BOSH_VM} | jq -r ".credential.value.identity")
    export PCFUP_BOSH_VM_PASSWORD=$(echo ${BOSH_VM} | jq -r ".credential.value.password")
  fi
  logInfo "BOSH Director VM"
  logInfo "  PCFUP_BOSH_VM_USER: ${PCFUP_BOSH_VM_USER}"
  logInfo "  PCFUP_BOSH_VM_PASSWORD: ${PCFUP_BOSH_VM_PASSWORD}"

  # UAA Admin
  export PCFUP_BOSH_UAA_ADMIN_ID="opsman"
  export PCFUP_BOSH_UAA_ADMIN_SECRET=""
  logInfo "BOSH UAA"
  logInfo "  PCFUP_BOSH_UAA_ADMIN_ID: ${PCFUP_BOSH_UAA_ADMIN_ID}"
  logInfo "  PCFUP_BOSH_UAA_ADMIN_SECRET: ${PCFUP_BOSH_UAA_ADMIN_SECRET}"


  CF_GUID=$(execOM curl -p "/api/v0/deployed/products" 2>/dev/null | jq -r ".[] | .guid" | grep cf)
  logDebug "CF deployment GUID: ${CF_GUID}"

  # CF Admin User
  if [ -z ${PCFUP_CF_ADMIN_USER+x} ]; then
    CF_ADMIN=$(execOM curl -p  "/api/v0/deployed/products/${CF_GUID}/credentials/.uaa.admin_credentials" 2>/dev/null)
    export PCFUP_CF_ADMIN_USER=$(echo ${CF_ADMIN} | jq -r ".credential.value.identity")
    export PCFUP_CF_ADMIN_PASSWORD=$(echo ${CF_ADMIN} | jq -r ".credential.value.password")
  fi
  logInfo "CF Admin"
  logInfo "  PCFUP_CF_ADMIN_USER: ${PCFUP_CF_ADMIN_USER}"
  logInfo "  PCFUP_CF_ADMIN_PASSWORD: ${PCFUP_CF_ADMIN_PASSWORD}"

  # CF Admin Client
  if [ -z ${PCFUP_CF_ADMIN_CLIENT_ID+x} ]; then
    CF_ADMIN_CLIENT=$(execOM curl -p  "/api/v0/deployed/products/${CF_GUID}/credentials/.uaa.admin_client_credentials" 2>/dev/null)
    export PCFUP_CF_ADMIN_CLIENT_ID=$(echo ${CF_ADMIN_CLIENT} | jq -r ".credential.value.identity")
    export PCFUP_CF_ADMIN_CLIENT_SECRET=$(echo ${CF_ADMIN_CLIENT} | jq -r ".credential.value.password")
  fi
  logInfo "  PCFUP_CF_ADMIN_CLIENT_ID: ${PCFUP_CF_ADMIN_CLIENT_ID}"
  logInfo "  PCFUP_CF_ADMIN_CLIENT_SECRET: ${PCFUP_CF_ADMIN_CLIENT_SECRET}"
}



###########################################################
# command: login-tools
###########################################################

function commandLoginTools() {

  # UAA Admin
  token owner get $PCFUP_BOSH_UAA_ADMIN_ID $OM_USERNAME -s $PCFUP_BOSH_UAA_ADMIN_SECRET -p $OM_PASSWORD
}


###########################################################
# parsing command parameters and arguments
###########################################################

export PATH=~/bin:$PATH

if [[ $# -lt 1 ]]; then
  COMMAND="help"
else
  COMMAND=$1
fi

case "$COMMAND" in
  help)
    commandHelp 
    ;;
  product)
    commandProduct $@
    ;;
  stemcell)
    commandStemcell $@
    ;;
  download-tools)
    commandDownloadTools $@
    ;;
  pivnet-login)
    commandPivnetLogin $@
    ;;
  installed-products)
    commandInstalledProducts $@
    ;;
  available-product-versions)
    commandAvailableProductVersions $@
    ;;
  outdated)
    logError "not implemented yet"
    exit 10
    ;;
  cleanup-downloads)
    logError "not implemented yet"
    exit 10
    ;;
  cleanup-om)
    logError "not implemented yet"
    exit 10
    ;;
  export-installation)
    commandExportInstallation $@
    ;;
  import-installation)
    commandImportInstallation $@
    ;;
  om)
    commandOM $@
    ;;
  wait-for-installation)
    commandWaitForInstallation $@
    ;;
  credentials)
    commandCredentials $@
    ;;
  version)
    logInfo "pcfup version $PCFUP_VERSION"
    ;;
  *)
    logError "'$1' is not a valid command"
    exit 11
    ;;
esac
